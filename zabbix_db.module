<?php

/**
 * Implements hook_menu();
 */
function zabbix_db_menu() {

  $items['admin/config/system/zabbix'] = array(
    'title' => 'Zabbix',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('zabbix_db_settings_form'),
    'access arguments' => array('zabbix_db_access'),
    //'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/zabbix/db/settings'] = array(
    'title' => 'Settings',
    'description' => 'Setting of ZABBIX DB module',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/system/zabbix/db/tables'] = array(
    'title' => 'Show status tables',
    'description' => 'Show statistics info about DB tables',
    'page callback' => 'zabbix_db_page',
    //'page arguments' => array(0, 1, 2, 3),
    'access arguments' => array('zabbix_db_access'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission();
 */
function zabbix_db_permission() {
  return array(
    'zabbix_db_access' => array(
      'title' => 'Zabbix DB',
      'description' => 'Access to Zabbix DB info panel',
    ),
  );
}

function zabbix_db_settings_form($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'zabbix_db') . '/js/zabbix_db_svg.js');
  // Get list connection from setting.php
  global $databases;

  foreach ($databases as $DB_NAME => $DB_SET) {
    $aOptions[$DB_NAME] = $DB_NAME;
  }
  $form['db'] = array(
    '#type' => 'fieldset',
    '#title' => "Choose connection name",
  );

  $svg = drupal_get_path('module', 'zabbix_db') . '/img/settings_connect2.svg';
  $html = '<div id="zbx_connect" > <object id="svg_connect" data="/' . $svg . '" type="image/svg+xml"> </object> </div>';

  $form['db']['info'] = array(
    '#markup' => 'You needed add connect option to zabbix db in settings.php' . $html .
    'after save, need clear views cache',
  );

  $form['db']['dbconnect'] = array(
    '#type' => 'select',
    '#options' => $aOptions,
    '#title' => 'Select connect name',
    '#default_value' => variable_get('zabbix_db_connect'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function zabbix_db_settings_form_submit($form, &$form_state) {
  $dbg = 1;
  $connect_name = $form_state['values']['dbconnect'];
  variable_set('zabbix_db_connect', $connect_name);

  //@FIXME need rebuild hook_views_data from zabbix_db.views.inc 
  // can`t find function in views what clear info
   cache_clear_all('*', 'cache_views_data', TRUE);
  module_load_include('inc', 'views', 'includes/plugins');
  if (module_exists('views') && function_exists('views_discover_plugins')) {
    views_theme($existing, $type, $theme, $path);
  }
}

function zabbix_db_page() {
  $content = '';
  $zbxdb_connect = variable_get('zabbix_db_connect', false);
  
  // if not setup connection , when  stop
  if (!$zbxdb_connect){
    $content = 'Upsss... you not set connection name.';
    $content .= l('Set connection name to ZABBIX DB','admin/config/system/zabbix/db/settings' );
    return $content;
  }
  
  db_set_active($zbxdb_connect);
  
 //@TODO Need switch for different DB type oracle, postgressql , etc...
  $query = db_select('information_schema.tables', 'inf');
  $query->addField('inf', 'table_name');
  $query->addField('inf', 'table_rows');
  $query->addExpression('DATA_FREE/1024/1024', 'DATA_FREE_MB');
  $query->addExpression('DATA_LENGTH/1024/1024', 'DATA_LENGTH_MB');
  $query->addExpression('INDEX_LENGTH/1024/1024', 'INDEX_LENGTH_MB');
  $query->condition('TABLE_SCHEMA', 'zabbix', '=');
  $result = $query->execute();

  if (!is_bool($result)) {
    $aStatus = $result->fetchAll(PDO::FETCH_ASSOC);
  }
  else {
    $content = 'Upsss... some go wrong on SQL';
    return $content;
  }
  db_set_active('default'); // return drupal db

  $rows = array();
  $full_size_sum = 0;
  foreach ($aStatus as $row) {
    $size_sum = $row['DATA_FREE_MB'] + $row['DATA_LENGTH_MB'] + $row['INDEX_LENGTH_MB'];
    $aRows[] = array(
      $row['table_name'],
      number_format($row['table_rows'], 0, '.', ' '),
      //$row['table_rows'],
      $row['DATA_FREE_MB'],
      $row['DATA_LENGTH_MB'],
      $row['INDEX_LENGTH_MB'],
      number_format($size_sum, 2, '.', ' '),
    );
    $full_size_sum = $full_size_sum + $size_sum;
  }

  $header = array(
    array(
      'data' => 'Table name',
//      'field' => '',
//      'sort' => 'DESC'
    ),
    array(
      'data' => 'Count rows',
    //'field' => ''
    ),
    array('data' => 'DATA_FREE_MB',
    //'field' => ''
    ),
    array(
      'data' => 'DATA_LENGTH_MB',
    //'field' => ''
    ),
    array(
      'data' => 'INDEX_LENGTH_MB',
    //'field' => ''
    ),
    array(
      'data' => 'SUMM_SIZE_MB',
    //'field' => ''
    ),
  );

  $content .= "<h2> Total size is: " . number_format($full_size_sum, 2, ',', ' ') . " MB </h2>";
  $content .= theme('table', array('header' => $header, 'rows' => $aRows));

  return $content;
}

/**
 * Implements hook_views_api().
 */
function zabbix_db_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'zabbix_db') . '/views',
  );
}

/**
 *  Сопостовляем числовые значения типов их  читабельному виду. 
 * 
 * @return string
 */
function zabbix_db_define_type(){
  //  $types[%TABLE_NAME%][%FIELD_NAME%][%VALUE%] = 'TEXT';
  $types = array();
  
  $types['items']['status'][0] = 'Activate';
  $types['items']['status'][1] = 'Deactivate';

  $types['items']['state'][0] = 'Normal';
  $types['items']['state'][1] = 'NOTSUPPORTED';  

  $types['items']['type'] = array(
        '0' => 'Zabbix agent',
        '1' => 'SNMPv1 agent',
        '2' => 'Zabbix trapper',
        '3' => 'Simple check',
        '4' => 'SNMPv2 agent',
        '5' => 'Zabbix internal',
        '6' => 'SNMPv3 agent',
        '7' => 'Zabbix agent (active)',
        '8' => 'Zabbix aggregate',
        '10' => 'External check',
        '11' => 'Database monitor',
        '12' => 'IPMI agent',
        '13' => 'SSH agent',
        '14' => 'TELNET agent',
        '15' => 'Calculated',
        '16' => 'JMX agent',
        '17' => 'SNMP trap',
      );
  
  return $types;
}